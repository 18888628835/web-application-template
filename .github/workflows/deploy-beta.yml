name: Build and Deploy Beta to Google Cloud Run

on:
  push:
    branches:
      - beta

env:
  GC_PROJECT_ID: dashcomb-leo
  GC_IMAGE_REPO_NAME: web-application-template
  GC_WEB_NAME: web
  GC_AR_LOCATION: asia-northeast1
  GC_REGION: asia-northeast1
  AWS_S3_CDN_BUCKET: static-web-application-template
  AWS_REGION: ap-northeast-1

jobs:
  build-web:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    environment: beta

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: beta

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache with docker buildx
        id: cache-docker-buildx
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: web-docker-${{ runner.os }}-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-web-docker
            ${{ runner.os }}-build-

      - name: google auth
        id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}"

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: "Use gcloud CLI"
        run: "gcloud auth list"

      - name: "Docker auth"
        run: gcloud auth configure-docker ${{ env.GC_REGION }}-docker.pkg.dev --quiet

      - name: Build image and push to GAR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web/Dockerfile
          push: true
          build-args: BUILD_ENV=beta
          tags: |
            ${{ env.GC_AR_LOCATION }}-docker.pkg.dev/${{ env.GC_PROJECT_ID }}/${{ env.GC_IMAGE_REPO_NAME }}/${{ env.GC_WEB_NAME }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Setup aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: "false"

      - name: copy content out of docker image
        run: |
          mkdir -p ./static
          docker create --name web ${{ env.GC_AR_LOCATION }}-docker.pkg.dev/${{ env.GC_PROJECT_ID }}/${{ env.GC_IMAGE_REPO_NAME }}/${{ env.GC_WEB_NAME }}
          docker cp web:/app/apps/web/public/. ./static
          docker rm web

      - name: copy static content to s3
        run: |
          aws s3 sync ./static s3://${{env.AWS_S3_CDN_BUCKET}}/web --delete

      - name: invalidate cloudfront
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/web/*"

  deploy-apps:
    runs-on: ubuntu-latest
    needs: [build-web]
    timeout-minutes: 10
    environment: beta
    permissions:
      contents: read
      packages: write
      id-token: write
      pull-requests: write
      statuses: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: beta

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}"

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: "Docker auth"
        run: gcloud auth configure-docker ${{ env.GC_REGION }}-docker.pkg.dev --quiet

      - name: Deploy web
        run: |
          gcloud run services replace service.yaml
           # gcloud run deploy ${{env.GC_WEB_NAME}} \
           # --image ${{ env.GC_AR_LOCATION }}-docker.pkg.dev/${{ env.GC_PROJECT_ID }}/${{ env.GC_IMAGE_REPO_NAME }}/${{ env.GC_WEB_NAME }} \
           # --platform managed --region ${{ env.GC_REGION }} \
           # --allow-unauthenticated \
           # --min-instances 1
